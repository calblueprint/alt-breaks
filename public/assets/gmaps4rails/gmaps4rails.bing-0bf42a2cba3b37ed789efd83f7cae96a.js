(function(){var t={}.hasOwnProperty,e=function(e,i){function n(){this.constructor=e}for(var s in i)t.call(i,s)&&(e[s]=i[s]);return n.prototype=i.prototype,e.prototype=new n,e.__super__=i.prototype,e};this.Gmaps4RailsBing=function(t){function i(){i.__super__.constructor.apply(this,arguments),this.map_options={type:"road"},this.markers_conf={infobox:"description"},this.mergeWithDefault("map_options"),this.mergeWithDefault("markers_conf")}return e(i,t),i.prototype.getMapType=function(){switch(this.map_options.type){case"road":return Microsoft.Maps.MapTypeId.road;case"aerial":return Microsoft.Maps.MapTypeId.aerial;case"auto":return Microsoft.Maps.MapTypeId.auto;case"birdseye":return Microsoft.Maps.MapTypeId.birdseye;case"collinsBart":return Microsoft.Maps.MapTypeId.collinsBart;case"mercator":return Microsoft.Maps.MapTypeId.mercator;case"ordnanceSurvey":return Microsoft.Maps.MapTypeId.ordnanceSurvey;default:return Microsoft.Maps.MapTypeId.auto}},i.prototype.createPoint=function(t,e){return new Microsoft.Maps.Point(t,e)},i.prototype.createLatLng=function(t,e){return new Microsoft.Maps.Location(t,e)},i.prototype.createLatLngBounds=function(){},i.prototype.createMap=function(){return new Microsoft.Maps.Map(document.getElementById(this.map_options.id),{credentials:this.map_options.provider_key,mapTypeId:this.getMapType(),center:this.createLatLng(this.map_options.center_latitude,this.map_options.center_longitude),zoom:this.map_options.zoom})},i.prototype.createSize=function(t,e){return new google.maps.Size(t,e)},i.prototype.createMarker=function(t){var e,i;return i=this.createLatLng(t.Lat,t.Lng),e=""===t.marker_picture?new Microsoft.Maps.Pushpin(this.createLatLng(t.Lat,t.Lng),{draggable:t.marker_draggable,anchor:this.createImageAnchorPosition(t.Lat,t.Lng),text:t.marker_title}):new Microsoft.Maps.Pushpin(this.createLatLng(t.Lat,t.Lng),{draggable:t.marker_draggable,anchor:this.createImageAnchorPosition(t.Lat,t.Lng),icon:t.marker_picture,height:t.marker_height,text:t.marker_title,width:t.marker_width}),this.addToMap(e),e},i.prototype.clearMarkers=function(){var t,e,i,n,s;for(n=this.markers,s=[],e=0,i=n.length;i>e;e++)t=n[e],s.push(this.clearMarker(t));return s},i.prototype.clearMarker=function(t){return this.removeFromMap(t.serviceObject)},i.prototype.showMarkers=function(){var t,e,i,n,s;for(n=this.markers,s=[],e=0,i=n.length;i>e;e++)t=n[e],s.push(this.showMarker(t));return s},i.prototype.showMarker=function(t){return t.serviceObject.setOptions({visible:!0})},i.prototype.hideMarkers=function(){var t,e,i,n,s;for(n=this.markers,s=[],e=0,i=n.length;i>e;e++)t=n[e],s.push(this.hideMarker(t));return s},i.prototype.hideMarker=function(t){return t.serviceObject.setOptions({visible:!1})},i.prototype.extendBoundsWithMarkers=function(){var t,e,i,n,s;for(t=[],s=this.markers,i=0,n=s.length;n>i;i++)e=s[i],t.push(e.serviceObject.getLocation());return this.boundsObject=Microsoft.Maps.LocationRect.fromLocations(t)},i.prototype.createClusterer=function(){},i.prototype.clearClusterer=function(){},i.prototype.clusterize=function(){},i.prototype.createInfoWindow=function(t){var e;return null!=t.description?(t.info_window="description"===this.markers_conf.infobox?new Microsoft.Maps.Infobox(t.serviceObject.getLocation(),{description:t.description,visible:!1,showCloseButton:!0}):new Microsoft.Maps.Infobox(t.serviceObject.getLocation(),{htmlContent:t.description,visible:!1}),e=this,Microsoft.Maps.Events.addHandler(t.serviceObject,"click",this.openInfoWindow(e,t.info_window)),this.addToMap(t.info_window)):void 0},i.prototype.openInfoWindow=function(t,e){return function(){return t.visibleInfoWindow&&t.visibleInfoWindow.setOptions({visible:!1}),e.setOptions({visible:!0}),t.visibleInfoWindow=e}},i.prototype.fitBounds=function(){return this.serviceObject.setView({bounds:this.boundsObject})},i.prototype.addToMap=function(t){return this.serviceObject.entities.push(t)},i.prototype.removeFromMap=function(t){return this.serviceObject.entities.remove(t)},i.prototype.centerMapOnUser=function(){return this.serviceObject.setView({center:this.userLocation})},i.prototype.updateBoundsWithPolylines=function(){},i.prototype.updateBoundsWithPolygons=function(){},i.prototype.updateBoundsWithCircles=function(){},i.prototype.extendMapBounds=function(){},i.prototype.adaptMapToBounds=function(){return this.fitBounds()},i}(Gmaps4Rails)}).call(this);